plugins {
    id "java"
    id "idea"
    id "jacoco"
    id "java-library"
//    id "signing"
    id "maven-publish"
    id "com.apollographql.apollo" version "2.0.0"
    id "com.github.jruby-gradle.base" version "1.6.0"
}
import com.github.jrubygradle.JRubyExec

version = "1.3.0"
group = "com.contentbig"

compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}


repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url "https://dl.bintray.com/graphql-java-kickstart/releases" }
    maven { url "https://dl.bintray.com/jruby-gradle/plugins" }
    maven {url 'http://rubygems-proxy.torquebox.org/releases'}
}

dependencies {
    compile "org.freemarker:freemarker:2.3.28"
    compile "com.contentbig:graphql-java-client-codegen-support:1.3.0"
    compile "com.google.code.gson:gson:2.8.6"

    compile 'org.jruby:jruby-complete:9.2.9.0'

    compileOnly 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'

    testCompileOnly 'org.projectlombok:lombok:1.18.12'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'

    testImplementation "org.junit.jupiter:junit-jupiter-api:5.5.1"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.5.1"
    testCompile 'org.hamcrest:java-hamcrest:2.0.0.0'

    gems group: 'rubygems', name: 'sinatra', version: '1.4.5'
    /* alternatively */
    gems 'rubygems:rake:10.3.+'
    /* prereleased gems needs to pick a specific version */
    gems 'rubygems:rails:4.2.3.rc1'

    jrubyExec "rubygems:bundler:1.16.1+"
//    jrubyExec "rubygems:bundler:2.1.4+"
    jrubyExec "rubygems:graphql_java_gen:0.1.1"

}

sourceSets {
    main {
        java {
            srcDirs = [
                    'src/main/java'
            ]
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test {
        java {
            srcDirs = ['src/main/java',
                       'src/test/java'
            ]
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}


task schemaMerge(type: SourceTask) {
    source 'dgraphschemadesign/schema'
    include '**/*.graphql'
    outputs.file new File(buildDir, "schema-merged.graphql")

    doLast {
        println "========schemaMerge to build/schema-merged.graphql"
        ant.concat(destfile: outputs.files.singleFile) {
            source.addToAntBuilder(ant, 'fileset', FileCollection.AntType.FileSet)
        }
        println "========schemaMerge success~"
    }
}

task schemaUpdate(dependsOn: schemaMerge) {
    doLast {
        def command = "curl -X POST localhost:8080/admin/schema -d '@build/schema-merged.graphql'"
        println "========schemaUpdate command:" + command
        try {
            exec {
                ExecSpec execSpec ->
                    executable 'bash'
                    args '-c', command
            }
            println "========schemaUpdate success~"
        } catch (Exception e) {
            e.printStackTrace()
        }
    }
}

task genJavaGraphqlClientCode(type: JRubyExec) {
    description "生成访问dgraph数据库的客户端graphql SDK代码"
    //script "bundle"
    script "${projectDir}/gen_graphql_java_client.rb"
}


test.useJUnitPlatform()

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("build/jacoco/*.exec")

    sourceSets sourceSets.main

    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled false
        csv.enabled false
    }
}

codeCoverageReport.dependsOn test

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = "sources"
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = "javadoc"
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
//            artifact javadocJar
            artifactId "kgis-datalake-dgraph"

            pom {
                name = "GraphQL Java CodeGen"
                description = "Java Code Generator based on GraphQL schema"
                url = "https://github.com/covid19angels/graphql-java-server-codegen"
                organization {
                    name = "com.contentbig"
                    url = "https://github.com/conanchen"
                }
                issueManagement {
                    system = "GitHub"
                    url = "https://github.com/covid19angels/graphql-java-server-codegen/issues"
                }
                licenses {
                    license {
                        name = "MIT License"
                        url = "https://github.com/covid19angels/graphql-java-server-codegen/blob/master/LICENSE"
                        distribution = "repo"
                    }
                }
                scm {
                    url = "https://github.com/covid19angels/graphql-java-server-codegen"
                    connection = "scm:git:git://github.com/covid19angels/graphql-java-server-codegen.git"
                    developerConnection = "scm:git:ssh://git@github.com:conanchen/graphql-java-server-codegen.git"
                }
                developers {
                    developer {
                        id = "kobylynskyi"
                        name = "Bogdan Kobylynskyi"
                        email = "92bogdan@gmail.com"
                    }
                    developer {
                        id = "valinha"
                        name = "Alberto Valiña"
                        email = "valinhadev@gmail.com"
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username sonatypeUsername
                password sonatypePassword
            }
        }
    }
}

//signing {
//    sign publishing.publications.mavenJava
//}