buildscript {

    repositories {
        mavenLocal()
        mavenCentral()
        google()
        jcenter()
        maven { url "https://dl.bintray.com/graphql-java-kickstart/releases" }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'https://repo.spring.io/plugins-release' }
        maven { url "http://maven.aliyun.com/nexus/content/repositories/central/" }
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        maven { url 'https://maven.aliyun.com/nexus/content/groups/public' }
        maven { url 'http://uk.maven.org/maven2/' }
        maven { url 'http://mirrors.ibiblio.org/pub/mirrors/maven2/' }
        maven { url 'http://repository.jboss.org/nexus/content/groups/public' }
        maven { url 'http://maven.oschina.net/content/groups/public/' }
        maven { url 'http://maven.net.cn/content/groups/public/' }
        maven { url 'https://repository.jboss.org/nexus/content/repositories/releases/' }

        maven {
            credentials {
                username 'KwPAxj'
                password 'KKnP3maIK3'
            }
            url 'https://repo.rdc.aliyun.com/repository/73792-release-PXkyIy/'
        }
        maven {
            credentials {
                username 'KwPAxj'
                password 'KKnP3maIK3'
            }
            url 'https://repo.rdc.aliyun.com/repository/73792-snapshot-z4fvGZ/'
        }
        maven { url 'https://jitpack.io' }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.2.4.RELEASE")
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.12'
        // jruby
        classpath "com.github.jruby-gradle:jruby-gradle-plugin:[1.1.2,1.2)"

        // okhttp
        classpath "com.squareup.okhttp3:okhttp:3.14.0"
        classpath "com.google.code.gson:gson:2.8.5"
        classpath "org.json:json:20190722"

        // 下载schema.json
        classpath("com.apollographql.apollo:apollo-gradle-plugin:1.3.2")
    }
}

plugins {
    //id "com.github.hierynomus.license" version "0.14.0"
    id "net.saliman.properties" version "1.4.6"
    id 'org.springframework.boot' version '2.2.4.RELEASE' apply false
    id "io.spring.dependency-management" version "1.0.9.RELEASE" apply false
    id 'java'
    id "idea"
    id 'application'
    id "net.ltgt.apt" version "0.20"
    id 'com.bmuschko.docker-remote-api' version '3.4.4'
}

// 阿波罗插件
apply plugin: 'com.apollographql.apollo'
// 上传到maven仓库
apply plugin: 'maven'



repositories {

    mavenLocal()
    maven {
        url 'http://rubygems-proxy.torquebox.org/releases'

    }
}


dependencies {

    compileOnly "org.projectlombok:lombok:1.18.8"
    annotationProcessor "org.projectlombok:lombok:1.18.8"
    implementation 'org.figurate:gradle-curl-plugin:1.0.2'

    implementation "com.bdlbsc:graphql-supper:latest"
    compile group: 'joda-time', name: 'joda-time', version: '2.10.5'
    compile "com.squareup.okhttp3:logging-interceptor:3.7.0"
    compile "com.google.code.gson:gson:2.7"
    compile "io.reactivex.rxjava2:rxjava:2.0.6"
    compile group: 'org.json', name: 'json', version: '20190722'


}

mainClassName = 'com.contentbig.KgisApplication'


sourceSets {
    main {
        java {
            srcDirs = [
                    'src/main/java'
            ]
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test {
        java {
            srcDirs = ['src/main/java',
                       'src/test/java'
            ]
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}


task schemaMerge(type: SourceTask) {
    source 'src'
    include '**/*.graphql'
    outputs.file new File(buildDir, "schema-merged.graphql")

    doLast {
        println "========schemaMerge to build/schema-merged.graphql"
        ant.concat(destfile: outputs.files.singleFile) {
            source.addToAntBuilder(ant, 'fileset', FileCollection.AntType.FileSet)
        }
        println "========schemaMerge success~"
    }
}

task schemaUpdate(dependsOn: schemaMerge) {
    doLast {
        def command = "curl -X POST localhost:8080/admin/schema -d '@build/schema-merged.graphql'"
        println "========schemaUpdate command:" + command
        try {
            exec {
                ExecSpec execSpec ->
                    executable 'bash'
                    args '-c', command
            }
            println "========schemaUpdate success~"
        } catch (Exception e) {
            e.printStackTrace()
        }
    }
}





apply plugin: "com.github.jruby-gradle.base"

import com.github.jrubygradle.JRubyExec

dependencies {

    jrubyExec "rubygems:bundler:1.16.1+"
    //jrubyExec "rubygems:graphql_java_gen:0.1.1"

}

task genJavaCode(type: JRubyExec) {
    description "Execute our nice local print-script.rb"
    //script "bundle"
    script "${projectDir}/update_schema.rb"
}



uploadArchives {
    repositories {
        mavenDeployer {
            repository url: 'file://' + new File(System.getProperty('user.home'), '.m2/repository').absolutePath
            pom.version = "latest"
            pom.artifactId = "dgraph-graphql-sdk"
            pom.groupId = "com.bdlbsc"
        }
    }
}